#include <stdio.h>

#define MAX_SIZE 100 // Maximum size of the array

// Function to display the elements of the array
void displayArray(int arr[], int size) {
    int i;
    printf("Array: ");
    for (i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Function to search for an element in the array
int searchArray(int arr[], int size, int key) {
    int i;
    for (i = 0; i < size; i++) {
        if (arr[i] == key) {
            return i; // Return the index if found
        }
    }
    return -1; // Return -1 if not found
}

// Function to insert an element at a specific position in the array
void insertElement(int arr[], int *size, int element, int position) {
    if (*size >= MAX_SIZE) {
        printf("Error: Array is full. Cannot insert element.\n");
        return;
    }
    if (position < 0 || position > *size) {
        printf("Error: Invalid position. Cannot insert element.\n");
        return;
    }
    int i;
    // Shift elements to the right to make space for the new element
    for (i = *size; i > position; i--) {
        arr[i] = arr[i - 1];
    }
    arr[position] = element;
    (*size)++;
    printf("Element %d inserted at position %d.\n", element, position);
}

// Function to delete an element at a specific position from the array
void deleteElement(int arr[], int *size, int position) {
    if (*size == 0) {
        printf("Error: Array is empty. Cannot delete element.\n");
        return;
    }
    if (position < 0 || position >= *size) {
        printf("Error: Invalid position. Cannot delete element.\n");
        return;
    }
    int i;
    printf("Element %d deleted from position %d.\n", arr[position], position);
    // Shift elements to the left to fill the gap created by the deleted element
    for (i = position; i < *size - 1; i++) {
        arr[i] = arr[i + 1];
    }
    (*size)--;
}

int main() {
    int arr[MAX_SIZE];
    int size = 0; // Current size of the array
    int choice, element, position, key, index;

    do {
        printf("\nArray Operations Menu:\n");
        printf("1. Insert Element\n");
        printf("2. Delete Element\n");
        printf("3. Search Element\n");
        printf("4. Display Array\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the element to insert: ");
                scanf("%d", &element);
                printf("Enter the position to insert: ");
                scanf("%d", &position);
                insertElement(arr, &size, element, position);
                break;
            case 2:
                printf("Enter the position to delete: ");
                scanf("%d", &position);
                deleteElement(arr, &size, position);
                break;
            case 3:
                printf("Enter the element to search: ");
                scanf("%d", &key);
                index = searchArray(arr, size, key);
                if (index != -1) {
                    printf("Element %d found at position %d.\n", key, index);
                } else {
                    printf("Element %d not found in the array.\n", key);
                }
                break;
            case 4:
                displayArray(arr, size);
                break;
            case 5:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice! Please enter a valid choice.\n");
        }
    } while (choice != 5);

    return 0;
}
