#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node in the linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the beginning of the linked list
void insertAtBeginning(struct Node** head_ref, int new_data) {
    // Allocate memory for the new node
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    // Insert the data
    new_node->data = new_data;
    // Make the next of new node as head
    new_node->next = (*head_ref);
    // Move the head to point to the new node
    (*head_ref) = new_node;
}

// Function to insert a new node after a given node
void insertAfter(struct Node* prev_node, int new_data) {
    // Check if the given prev_node is NULL
    if (prev_node == NULL) {
        printf("The given previous node cannot be NULL\n");
        return;
    }
    // Allocate memory for the new node
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    // Insert the data
    new_node->data = new_data;
    // Make the next of new node as next of prev_node
    new_node->next = prev_node->next;
    // Move the next of prev_node as new_node
    prev_node->next = new_node;
}

// Function to insert a new node at the end of the linked list
void insertAtEnd(struct Node** head_ref, int new_data) {
    // Allocate memory for the new node
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    struct Node* last = *head_ref; // Used in step 5
    // Insert the data
    new_node->data = new_data;
    // This new node is going to be the last node, so make next of it as NULL
    new_node->next = NULL;
    // If the linked list is empty, then make the new node as head
    if (*head_ref == NULL) {
        *head_ref = new_node;
        return;
    }
    // Else traverse till the last node
    while (last->next != NULL)
        last = last->next;
    // Change the next of last node
    last->next = new_node;
}

// Function to delete a node by key
void deleteNode(struct Node** head_ref, int key) {
    // Store head node
    struct Node* temp = *head_ref;
    struct Node* prev = NULL;

    // If head node itself holds the key to be deleted
    if (temp != NULL && temp->data == key) {
        *head_ref = temp->next; // Changed head
        free(temp); // Free old head
        return;
    }

    // Search for the key to be deleted, keep track of the previous node
    // as we need to change 'prev->next'
    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }

    // If key was not present in linked list
    if (temp == NULL) return;

    // Unlink the node from linked list
    prev->next = temp->next;

    free(temp); // Free memory
}

// Function to print the linked list
void printList(struct Node* node) {
    while (node != NULL) {
        printf("%d -> ", node->data);
        node = node->next;
    }
    printf("NULL\n");
}

// Main function to demonstrate the linked list operations
int main() {
    // Start with the empty list
    struct Node* head = NULL;

    // Insert 6. So linked list becomes 6->NULL
    insertAtEnd(&head, 6);

    // Insert 7 at the beginning. So linked list becomes 7->6->NULL
    insertAtBeginning(&head, 7);

    // Insert 1 at the beginning. So linked list becomes 1->7->6->NULL
    insertAtBeginning(&head, 1);

    // Insert 4 at the end. So linked list becomes 1->7->6->4->NULL
    insertAtEnd(&head, 4);

    // Insert 8 after 7. So linked list becomes 1->7->8->6->4->NULL
    insertAfter(head->next, 8);

    printf("Created Linked list: ");
    printList(head);

    // Delete node with data 7. So linked list becomes 1->8->6->4->NULL
    deleteNode(&head, 7);
    printf("Linked list after deletion of 7: ");
    printList(head);

    return 0;
}
