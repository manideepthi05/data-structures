#include <stdio.h>
#include <stdlib.h>

#define MAX 100

struct Queue {
    int front, rear, size;
    int items[MAX];
};

// Function to initialize the queue
void initialize(struct Queue* queue) {
    queue->front = 0;
    queue->rear = -1;
    queue->size = 0;
}

// Function to check if the queue is empty
int isEmpty(struct Queue* queue) {
    return queue->size == 0;
}

// Function to check if the queue is full
int isFull(struct Queue* queue) {
    return queue->size == MAX;
}

// Function to add an item to the queue
void enqueue(struct Queue* queue, int item) {
    if (isFull(queue)) {
        printf("Queue overflow\n");
        return;
    }
    queue->rear = (queue->rear + 1) % MAX;
    queue->items[queue->rear] = item;
    queue->size++;
    printf("%d enqueued to queue\n", item);
}

// Function to remove an item from the queue
int dequeue(struct Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue underflow\n");
        return -1;
    }
    int item = queue->items[queue->front];
    queue->front = (queue->front + 1) % MAX;
    queue->size--;
    return item;
}

// Function to get the front item of the queue
int front(struct Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty\n");
        return -1;
    }
    return queue->items[queue->front];
}

// Function to get the rear item of the queue
int rear(struct Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty\n");
        return -1;
    }
    return queue->items[queue->rear];
}

// Function to display the queue
void display(struct Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty\n");
        return;
    }
    printf("Queue elements are: ");
    for (int i = 0; i < queue->size; i++) {
        printf("%d ", queue->items[(queue->front + i) % MAX]);
    }
    printf("\n");
}

// Main function to demonstrate queue operations
int main() {
    struct Queue queue;
    initialize(&queue);

    enqueue(&queue, 10);
    enqueue(&queue, 20);
    enqueue(&queue, 30);
    enqueue(&queue, 40);

    printf("Front item is %d\n", front(&queue));
    printf("Rear item is %d\n", rear(&queue));

    printf("Elements in the queue: ");
    display(&queue);

    printf("%d dequeued from queue\n", dequeue(&queue));
    printf("%d dequeued from queue\n", dequeue(&queue));

    printf("Elements in the queue after dequeue: ");
    display(&queue);

    return 0;
}
